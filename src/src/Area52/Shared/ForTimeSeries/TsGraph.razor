@using ApexCharts;
@using Area52.Services.Contracts;
@using Area52.Services.Contracts.TimeSeries
@inject ITimeSeriesService TimeSeriesService
@inject ITimeSerieDefinitionsService TimeSerieDefinitionsService

<div class="card @this.AdditionalClass">
    <div class="card-body">
        @if (this.isInLoading)
        {
            <LoadingIndicator />
        }

        @if (this.items != null)
        {
            <div class="card-title">@this.tsDef!.Name</div>
            <ApexChart TItem="TimeSeriesItem"
                   Title=""
                   Options="@options"
                   Height="250"
                   XAxisType="XAxisType.Datetime"
                   @ref="chart">

                <ApexPointSeries TItem="TimeSeriesItem"
                             Items="@this.items"
                             Name="@(this.tsDef.ValueFieldName?? string.Empty)"
                             SeriesType="@seriesType"
                             XValue="@(e => e.Time)"
                             YValue="@(e => (decimal)e.Value)"
                             OrderBy="e=>e.X"
                             Stroke="@(new SeriesStroke() { Width = 1, Color = "#0d6efd" })" />
            </ApexChart>
        }

        <p class="card-text text-muted">@(this.tsDef?.Description??string.Empty)</p>
    </div>

    @if (this.tsDef != null)
    {
        <div class="card-footer">
            <div class="row">
                <div class="col-8"></div>
                <div class="col-2">
                    <select class="form-control form-select-sm"
                        value="@this.graphTime"
                        @onchange="@(value => this.GraphTimeValueChanged(Enum.Parse<ShowGraphTime>(value?.Value?.ToString()??this.tsDef.DefaultAggregationFunction.ToString())))">
                        <option value="@ShowGraphTime.LastHour">Show last hour</option>
                        <option value="@ShowGraphTime.LastDay">Show last day</option>
                        <option value="@ShowGraphTime.LastWeek">Show last week</option>
                        <option value="@ShowGraphTime.LastMonth">Show last month</option>
                        <option value="@ShowGraphTime.LastYear">Show last year</option>
                    </select>
                </div>
                <div class="col-2">
                    <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="ToggleGraph">
                        Togle graph type
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    [EditorRequired]
    public string Id
    {
        get;
        set;
    } = null!;

    [Parameter]
    public string AdditionalClass
    {
        get;
        set;
    } = string.Empty;

    private ApexChart<TimeSeriesItem> chart = null!;
    private ApexChartOptions<TimeSeriesItem> options = new ApexChartOptions<TimeSeriesItem>()
        {
            Chart = new Chart()
            {
                Zoom = new Zoom()
                {
                    Enabled = false
                },
                Animations = new Animations
                {
                    Easing = Easing.Linear,
                    DynamicAnimation = new DynamicAnimation
                    {
                        Speed = 500
                    }
                }
            }
        };

    private IReadOnlyList<TimeSeriesItem>? items = null;
    private TimeSerieDefinition? tsDef = null;
    private SeriesType seriesType = SeriesType.Area;
    private ShowGraphTime graphTime;
    private bool isInLoading = false;

    //protected override async Task OnInitializedAsync()
    //{

    //}

    protected override async Task OnParametersSetAsync()
    {
        this.tsDef = await TimeSerieDefinitionsService.FindById(this.Id);
        this.graphTime = this.tsDef.ShowGraphTime;

        this.items = null;
        this.isInLoading = true;
        this.StateHasChanged();
        await Task.Yield();
        try
        {
            this.items = await this.TimeSeriesService.ExecuteQuery(this.CreateParameter(this.tsDef, this.tsDef.ShowGraphTime), default);
        }
        finally
        {
            this.isInLoading = false;
        }
    }

    private TimeSeriesQueryRequest CreateParameter(TimeSerieDefinition timeSerieDefinition, ShowGraphTime showGraphTime)
    {
        DateTime utcNow = DateTime.UtcNow;
        (TimeSpan diff, TimeSeriesGroupByFn groupByFn) = showGraphTime switch
        {
            ShowGraphTime.LastHour => (TimeSpan.FromHours(1.0), TimeSeriesGroupByFn.Minutes),
            ShowGraphTime.LastDay => (TimeSpan.FromHours(24.0), TimeSeriesGroupByFn.Minutes),
            ShowGraphTime.LastWeek => (TimeSpan.FromDays(7.0), TimeSeriesGroupByFn.Hours),
            ShowGraphTime.LastMonth => (TimeSpan.FromDays(30.0), TimeSeriesGroupByFn.Days),
            ShowGraphTime.LastYear => (TimeSpan.FromDays(365.0), TimeSeriesGroupByFn.Weeks),
            _ => throw new InvalidProgramException($"Enum value {showGraphTime} is not supported.")
        };

        return new TimeSeriesQueryRequest()
            {
                DefinitionId = this.Id,
                AgregationFunction = timeSerieDefinition.DefaultAggregationFunction,
                From = utcNow - diff,
                To = utcNow,
                GroupByFunction = groupByFn
            };
    }

    private async Task GraphTimeValueChanged(ShowGraphTime newValue)
    {
        System.Diagnostics.Debug.Assert(this.tsDef is not null);
        this.graphTime = newValue;
        this.isInLoading = true;
        await Task.Yield();

        try
        {
            this.items = await this.TimeSeriesService.ExecuteQuery(this.CreateParameter(this.tsDef, newValue), default);
        }
        finally
        {
            this.isInLoading = false;
        }
        await this.chart.UpdateSeriesAsync();
    }

    private async Task ToggleGraph()
    {
        if (this.seriesType == SeriesType.Area)
        {
            this.seriesType = SeriesType.Bar;
        }
        else
        {
            this.seriesType = SeriesType.Area;
        }

        // Hek for reaload graph type
        var tmp = this.items;
        this.items = null;
        this.StateHasChanged();
        await Task.Yield();
        this.items = tmp;
        this.StateHasChanged();
    }
}