@using Area52.Services.Contracts
@using Microsoft.Extensions.Logging
@inject ILogReader LogReader
@inject ILogger<LogRow> Logger

<div class="row @(this.showDetails? "bg-light":string.Empty)">
    <div class="col-2 pointer-cursor" @onclick="@ToggleShowDetails">@this.LogInfo.Timestamp.ToString("s")</div>
    <div class="col-1 pointer-cursor" @onclick="@ToggleShowDetails"><LogLevelBadge Level="@this.LogInfo.Level" /></div>
    <div class="col-9">@this.LogInfo.Message</div>
</div>

@if (this.showDetails)
{
    <div class="row bg-light">

        <div class="col-11" style="margin-left: 3em;">
            @if (this.errorMessage != null)
            {
                <p class="text-danger">@this.errorMessage</p>
            }
            else if (this.entity == null)
            {
                <LoadingIndicator />
            }
            else
            {
                <h6 class="fw-bold">Template</h6>
                <p>@this.entity.MessageTemplate</p>
                @if (this.entity.Exception != null)
                {
                    <h6 class="fw-bold">Exception</h6>
                    <p><pre>@this.entity.Exception</pre></p>
                }

                <table class="table table-sm">
                    <thead>
                        <tr>
                            <th>Property name</th>
                            <th>Value</th>
                            <th>Operation</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr @key="@("Level")">
                            <td>Level</td>
                            <td><LogLevelBadge Level="@this.LogInfo.Level" /></td>
                            <td>
                                <div class="btn-group btn-group-sm" role="group">
                                    <button type="button" class="btn btn-sm btn-outline-primary small" @onclick="@(_=>this.AddToSearch("Level", entity.Level, "is eg"))">
                                        <span class="oi oi-plus"></span>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-outline-primary small" @onclick="@(_=>SerachNow("Level", entity.Level, "is eg"))">
                                        <span class="oi oi-loop-square"></span>
                                    </button>

                                    <button type="button" class="btn btn-sm btn-outline-primary small" @onclick="@(_=>this.AddToSearch("LevelNumeric", entity.LevelNumeric, ">="))">
                                        <span class="oi oi-chevron-right"></span>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-outline-primary small" @onclick="@(_=>SerachNow("LevelNumeric", entity.LevelNumeric, ">="))">
                                        <span class="oi oi-caret-right"></span>
                                    </button>
                                </div>
                            </td>
                        </tr>
                        @foreach (var attr in this.entity.Properties)
                        {
                            <tr @key="@attr.Name">
                                <td>@attr.Name</td>
                                <td>@attr.GetValueString()</td>
                                <td>
                                    <div class="btn-group btn-group-sm" role="group">
                                        <button type="button" class="btn btn-sm btn-outline-primary small" @onclick="@(_=>this.AddToSearch(attr))">
                                            <span class="oi oi-plus"></span>
                                        </button>
                                        <button type="button" class="btn btn-sm btn-outline-primary small" @onclick="@(_=>SerachNow(attr))">
                                            <span class="oi oi-loop-square"></span>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
}

@code {
    private bool showDetails = false;
    private LogEntity? entity = null;
    private string? errorMessage = null;

    [Parameter]
    [EditorRequired]
    public LogInfo LogInfo
    {
        get;
        set;
    }

    [CascadingParameter]
    public SerachControlContext Context
    {
        get;
        set;
    }

    private async Task ToggleShowDetails()
    {
        this.showDetails = !this.showDetails;
        this.errorMessage = null;
        if (this.showDetails && this.entity == null)
        {
            try
            {
                this.entity = await this.LogReader.LoadLogInfo(this.LogInfo.Id);
            }
            catch (Exception ex)
            {
                this.Logger.LogError(ex, "Unexpected error during call ToggleShowDetails (LoadLogInfo).");
                this.errorMessage = ex.Message;
            }
        }
    }

    private void AddToSearch(LogEntityProperty property)
    {
        this.Context?.AddToQuery(property);
    }

    private void AddToSearch(string name, string value, string? op = null)
    {
        this.Context?.AddToQuery(new LogEntityProperty()
            {
                Name = name,
                Values = value
            });
    }

    private void AddToSearch(string name, double value, string? op = null)
    {
        this.Context?.AddToQuery(new LogEntityProperty()
            {
                Name = name,
                Valued = value
            }, op);
    }

    private void SerachNow(LogEntityProperty property)
    {
        this.Context?.SearchNow(property);
    }

    private void SerachNow(string name, string value, string? op = null)
    {
        this.Context?.SearchNow(new LogEntityProperty()
            {
                Name = name,
                Values = value
            }, op);
    }

    private void SerachNow(string name, double value, string? op = null)
    {
        this.Context?.SearchNow(new LogEntityProperty()
            {
                Name = name,
                Valued = value
            }, op);
    }
}