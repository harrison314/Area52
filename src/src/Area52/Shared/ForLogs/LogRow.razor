@using Area52.Services.Contracts
@using Area52.Services.Implementation
@using Microsoft.Extensions.Logging
@inject ILogReader LogReader
@inject Microsoft.JSInterop.IJSRuntime JsRuntime
@inject IBlazorStrap BlazorStrap
@inject ILogger<LogRow> Logger

<div class="row @(this.showDetails? "bg-light":string.Empty)">
    <div class="col-2 pointer-cursor" @onclick="@ToggleShowDetails">@this.LogInfo.Timestamp.ToString(FormatConstants.ShowSortableDateTimeFormat)</div>
    <div class="col-1 pointer-cursor" @onclick="@ToggleShowDetails"><LogLevelBadge Level="@this.LogInfo.Level" /></div>
    <div class="col-9">@this.LogInfo.Message</div>
</div>

@if (this.showDetails)
{
    <div class="row bg-light">
        <div class="col-11" style="margin-left: 3em;">

            @if (this.errorMessage != null)
            {
                <p class="text-danger">@this.errorMessage</p>
            }
            else if (this.entity == null)
            {
                <LoadingIndicator />
            }
            else
            {
                <div class="row mt-1">
                    <div class="col">
                        <div class="btn-group btn-group-sm float-end" role="group">
                            <BSDropdown>
                                <Toggler>
                                    <BSToggle IsButton="true" Color="BSColor.Primary" IsOutlined="true" Size="Size.Small">
                                        <span class="fa fa-arrows-v"></span>&nbsp;
                                    </BSToggle>
                                </Toggler>
                                <Content>
                                    <BSDropdownItem @onclick="@(_=>this.AddToTimestampSearch(10))">Near 10 sec.</BSDropdownItem>
                                    <BSDropdownItem @onclick="@(_=>this.AddToTimestampSearch(60))">Near 1 min.</BSDropdownItem>
                                    <BSDropdownItem @onclick="@(_=>this.AddToTimestampSearch(600))">Near 10 min.</BSDropdownItem>
                                    <BSDropdownItem IsDivider="true" />
                                    <BSDropdownItem @onclick="@(_=>this.AddToNewerSearch())">Newer</BSDropdownItem>
                                    <BSDropdownItem @onclick="@(_=>this.AddToOlderSearch())">Older</BSDropdownItem>
                                </Content>
                            </BSDropdown>

                            <button type="button" class="btn btn-sm btn-outline-primary small" @onclick="this.CopyLogFormatedMessage">
                                <span class="fa fa-copy"></span>
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-primary small" @onclick="this.CopyAsJson">
                                <span class="fa fa-code"></span>
                            </button>
                        </div>
                    </div>
                </div>

                <h6 class="fw-bold">Template</h6>
                <p>@this.entity.MessageTemplate</p>
                @if (this.entity.Exception != null)
                {
                    <h6 class="fw-bold">Exception</h6>
                    <p><pre>@this.entity.Exception</pre></p>
                }

                <table class="table table-sm">
                    <thead>
                        <tr>
                            <th>Property name</th>
                            <th>Value</th>
                            <th>Operation</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr @key="@("Level")">
                            <td>Level</td>
                            <td><LogLevelBadge Level="@this.LogInfo.Level" /></td>
                            <td>
                                <div class="btn-group btn-group-sm" role="group">
                                    <button type="button" class="btn btn-sm btn-outline-primary small" @onclick="@(_=>this.AddToSearch("Level", entity.Level, "is"))">
                                        <span class="fa fa-plus"></span>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-outline-primary small" @onclick="@(_=>SerachNow("Level", entity.Level, "is"))">
                                        <span class="fa fa-exchange"></span>
                                    </button>

                                    <button type="button" class="btn btn-sm btn-outline-primary small" @onclick="@(_=>this.AddToSearch("LevelNumeric", entity.LevelNumeric, ">="))">
                                        <span class="fa fa-chevron-right"></span>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-outline-primary small" @onclick="@(_=>SerachNow("LevelNumeric", entity.LevelNumeric, ">="))">
                                        <span class="fa fa-play"></span>
                                    </button>
                                </div>
                            </td>
                        </tr>
                        @foreach (var attr in this.entity.Properties)
                        {
                            <tr @key="@attr.Name">
                                <td>@attr.Name</td>
                                <td>@attr.GetValueString()</td>
                                <td>
                                    <div class="btn-group btn-group-sm" role="group">
                                        <button type="button" class="btn btn-sm btn-outline-primary small" @onclick="@(_=>this.AddToSearch(attr))">
                                            <span class="fa fa-plus"></span>
                                        </button>
                                        <button type="button" class="btn btn-sm btn-outline-primary small" @onclick="@(_=>SerachNow(attr))">
                                            <span class="fa fa-exchange"></span>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
}

@code {
    private bool showDetails = false;
    private LogEntity? entity = null;
    private string? errorMessage = null;

    [Parameter]
    [EditorRequired]
    public LogInfo LogInfo
    {
        get;
        set;
    } = null!;

    [CascadingParameter]
    public SearchControlContext Context
    {
        get;
        set;
    }= null!;

    private async Task ToggleShowDetails()
    {
        this.showDetails = !this.showDetails;
        this.errorMessage = null;
        if (this.showDetails && this.entity == null)
        {
            try
            {
                this.entity = await this.LogReader.LoadLogInfo(this.LogInfo.Id);
            }
            catch (Exception ex)
            {
                this.Logger.LogError(ex, "Unexpected error during call ToggleShowDetails (LoadLogInfo).");
                this.errorMessage = ex.Message;
            }
        }
    }

    private void AddToSearch(LogEntityProperty property)
    {
        this.Context?.AddToQuery(property);
    }

    private void AddToSearch(string name, string value, string? op = null)
    {
        this.Context?.AddToQuery(new LogEntityProperty()
            {
                Name = name,
                Values = value
            });
    }

    private void AddToSearch(string name, double value, string? op = null)
    {
        this.Context?.AddToQuery(new LogEntityProperty()
            {
                Name = name,
                Valued = value
            }, op);
    }

    private void SerachNow(LogEntityProperty property)
    {
        this.Context?.SearchNow(property);
    }

    private void SerachNow(string name, string value, string? op = null)
    {
        this.Context?.SearchNow(new LogEntityProperty()
            {
                Name = name,
                Values = value
            }, op);
    }

    private void SerachNow(string name, double value, string? op = null)
    {
        this.Context?.SearchNow(new LogEntityProperty()
            {
                Name = name,
                Valued = value
            }, op);
    }

    private void AddToTimestampSearch(int secunds)
    {
        System.Diagnostics.Debug.Assert(this.entity is not null);
        this.Context?.AddToQuery(this.entity.Timestamp, secunds);
    }

    private void AddToNewerSearch()
    {
        System.Diagnostics.Debug.Assert(this.entity is not null);
        this.Context?.AddToQuery(new LogEntityProperty("Timestamp", this.entity.Timestamp.ToString(FormatConstants.SortableDateTimeFormat)), ">=");
    }

    private void AddToOlderSearch()
    {
        System.Diagnostics.Debug.Assert(this.entity is not null);
        this.Context?.AddToQuery(new LogEntityProperty("Timestamp", this.entity.Timestamp.ToString(FormatConstants.SortableDateTimeFormat)), "<=");
    }

    private async Task CopyText(string text, string message)
    {
        await this.JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
        this.BlazorStrap.Toaster.Add("Copy", message, o =>
        {
            o.CloseAfter = 1000;
            o.Color = BSColor.Info;
            o.Toast = Toast.Default;
        });
    }

    private async Task CopyLogFormatedMessage()
    {
        System.Diagnostics.Debug.Assert(this.entity is not null);
        await this.CopyText($"{this.entity.Timestamp.ToString(FormatConstants.SortableDateTimeFormat)} | {this.entity.Level} | {this.entity.Message} | {this.entity.Exception}",
        "Copy log information's to clipboard.");
    }

    private async Task CopyAsJson()
    {
        System.Diagnostics.Debug.Assert(this.entity is not null);
        string json = System.Text.Json.JsonSerializer.Serialize<LogEntity>(this.entity,
        new System.Text.Json.JsonSerializerOptions()
        {
            WriteIndented = true
        });

        await this.CopyText(json,"Copy log as JSON to clipboard.");
    }
}